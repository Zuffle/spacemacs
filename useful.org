#+BEGIN_SRC elisp :results silent :tangle yes
  (defun insert-elisp-src-block (&optional results-specifier)
    (insert (format "#+BEGIN_SRC elisp%s\n\n#+END_SRC"
                    (if results-specifier
                        (concat " :results " results-specifier)
                      "")))
    (forward-line -3)
    (beginning-of-line)
    (if (looking-at "(el")
        (progn
          (kill-line)
          (delete-char 1)
          (forward-line))
      (forward-line 2))
    (insert "  "))

  (defun el ()
    (insert-elisp-src-block))

  (defun elc ()
    (insert-elisp-src-block "code"))

  (defun elr ()
    (insert-elisp-src-block "raw"))

  (defun els ()
    (insert-elisp-src-block "silent"))

  (defun elv ()
    (insert-elisp-src-block "value"))
#+END_SRC

#+BEGIN_SRC elisp :results silent :tangle yes
  (defun compute-final-grade (list-of-grades)
    "From list-of-grades compute weighted percentage and
    convert to letter grade, returning both."
    (let* ((weighted-percentage (apply '+ list-of-grades)) 
           (number (ceiling weighted-percentage))
           (tensDigit (/ number 10))
           (onesDigit (mod number 10))
           (index (min (max (- tensDigit 5) 0) 4))
           (letter (substring "FDCBA" index (+ index 1)))
           (sign (if (<= onesDigit 2) "-" (if (>= onesDigit 7) "+")))
           (letter-grade (concat letter (if (and (< number 95) (>= number 60)) sign))))
      (list (format "%2.2f" weighted-percentage) letter-grade)))
#+END_SRC

#+BEGIN_SRC elisp :results silent :tangle yes
  ;; We may want to do some cryptographic magic.
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  ;; Automatically Save Buffer Before Evaluating Code Blocks
  ;; by adding 'save-buffer to the org-ctrl-c-ctrl-c-hook list.
  (setq org-ctrl-c-ctrl-c-hook (cons 'save-buffer org-ctrl-c-ctrl-c-hook))
#+END_SRC
