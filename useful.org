#+BEGIN_SRC elisp :results silent :tangle yes
  (defun insert-elisp-src-block (&optional results-specifier)
    (insert (format "#+BEGIN_SRC elisp%s\n\n#+END_SRC"
                    (if results-specifier
                        (concat " :results " results-specifier)
                      "")))
    (forward-line -3)
    (beginning-of-line)
    (if (looking-at "(el")
        (progn
          (kill-line)
          (delete-char 1)
          (forward-line))
      (forward-line 2))
    (insert "  "))

  (defun el ()
    (insert-elisp-src-block))

  (defun elc ()
    (insert-elisp-src-block "code"))

  (defun elo ()
    (insert-elisp-src-block "output"))

  (defun elr ()
    (insert-elisp-src-block "raw"))

  (defun els ()
    (insert-elisp-src-block "silent"))

  (defun elv ()
    (insert-elisp-src-block "value"))

  (defun relocate-file-to-work-folder ()
    (let* ((work-folder (or (getenv "WORK")
                            (concat (getenv "HOME") "/work")))
           (this-file-name (file-name-nondirectory (buffer-file-name)))
           (dest-file-name (concat work-folder "/" this-file-name)))
      (rename-file this-file-name dest-file-name)
      (find-alternate-file dest-file-name)
      dest-file-name))

  ;; Automatically Save Buffer Before Evaluating Code Blocks
  ;; by adding 'save-buffer to the org-ctrl-c-ctrl-c-hook list.
  (require 'org)
  (setq org-ctrl-c-ctrl-c-hook (cons 'save-buffer org-ctrl-c-ctrl-c-hook))
#+END_SRC
