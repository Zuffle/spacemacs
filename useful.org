#+name: code
#+begin_src elisp :results silent
  (require 'org)

  (defun insert-elisp-src-block (&optional results-specifier)
    (insert (format "#+begin_src elisp%s\n\n#+end_src"
                    (if results-specifier
                        (concat " :results " results-specifier)
                      "")))
    (forward-line -3)
    (beginning-of-line)
    (if (looking-at "(el")
        (progn
          (kill-line)
          (delete-char 1)
          (forward-line))
      (forward-line 2))
    (insert "  "))

  (defun el ()
    (insert-elisp-src-block))

  (defun elc ()
    (insert-elisp-src-block "code"))

  (defun elo ()
    (insert-elisp-src-block "output"))

  (defun elr ()
    (insert-elisp-src-block "raw"))

  (defun els ()
    (insert-elisp-src-block "silent"))

  (defun elv ()
    (insert-elisp-src-block "value"))

  (defun relocate-file-to-work-folder (&optional copy-not-move)
    (let* ((work-folder (or (getenv "WORK")
                            (concat (getenv "HOME") "/work")))
           (this-file-name (file-name-nondirectory (buffer-file-name)))
           (dest-file-name (concat work-folder "/" this-file-name)))
      (mkdir work-folder t)
      (if copy-not-move
          (copy-file this-file-name dest-file-name t)
        (rename-file this-file-name dest-file-name))
      (find-alternate-file dest-file-name)
      dest-file-name))

  (defun calculate-score (possible-points-alist)
    (loop with named-list-alist =
          (org-element-map (org-element-parse-buffer) 'plain-list
            (lambda (plain-list) (cons (org-element-property :name plain-list)
                                       (org-element-property :structure plain-list))))
          for (category-symbol . category-points) in possible-points-alist
          sum (loop for checked in
                    (loop for el in
                          (cdr (assoc (concat "assertions-" (symbol-name category-symbol))
                                      named-list-alist))
                          collect (string= (nth 4 el) "[X]"))
                    for points in category-points
                    when checked
                    sum points)))

  ;; automatically save buffer before evaluating code blocks
  ;; by adding 'save-buffer to the org-ctrl-c-ctrl-c-hook list.
  (setq org-ctrl-c-ctrl-c-hook (cons 'save-buffer org-ctrl-c-ctrl-c-hook))

  (defun dm/display-inline-images ()
    (condition-case t
      (org-display-inline-images)
      (error nil)))

  (add-hook 'org-babel-after-execute-hook 'dm/display-inline-images 'append)
#+end_src
