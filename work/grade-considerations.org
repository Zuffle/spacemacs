#+TITLE: Grade Considerations
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: theme-bigblow.setup

* Hints for DM1 Assignment 01.3
  
  First, a Hint about Hints:

  With your cursor on a :HINT: line, pressing TAB will toggle the open/close
  state of these \ldquo{}drawers\rdquo, as org-mode refers to them.

  They are all closed when you first open this file. Open them only after you
  take the opportunity to see how far you can get without them.

  Also, at the top of this file note the \ldquo{}not\rdquo in the first #+OPTIONS: header.
  This controls the invisibility of the HINT drawers when exporting this org
  file to html, which you can do by the following key sequence:

#+BEGIN_EXAMPLE
  , e e h o
#+END_EXAMPLE

  - CRC
:HINT:
  - Hint :: Do not be picky about the wording \ldquo{}There is no right answer\rdquo, which
            could be interpreted as \ldquo{}There is no answer that you could give that
            would be right.\rdquo That would be a misinterpretation.
:END:

  - DGZ
:HINT:
  - Hint :: Lewis Carroll is your friend here.
:END:

  - CHJ
:HINT:
  - Hint :: A \ldquo{}word\rdquo with no vowels is a clear winner of the largest contest ---
            a CVR can\rsquo{}t be more than infinity. So don\rsquo{}t count CVRs like that.
            (That is why /finite/ was stipulated.) With that, tying for first
            place at 3 (to 1) would be \lsquo{}What\rsquo and \lsquo{}word\rsquo, with CVR at 3 (to 0)
            disqualified.
  - Also :: Count /y/ as a vowel, even when it is the first letter of a word.
:END:

  - DZB
:HINT:
  - Hint :: Another name for this problem is the /Limiting Radius/ problem, and
            a /trigonometric approach/ to it is suggested by this image:

            [[https://rickneff.github.io/img/limiting-radius-problem-solution-attempt.png]]
:END:

  - DOK
:HINT:
  - Hint :: In case it wasn\rsquo{}t clear, you are being asked to form the product of
            3 numbers. And to do that over and over again, as many times as it
            takes.
  - Hint :: Try dividing all the products by 6.
  - Time Hint :: There is another connection to be made, but to pursue this
                 quest is potentially time-consuming.
:END:

  - CJF
:HINT:
  - Hint :: Split the 6-digit number into two 3-digit numbers, and think of the
            word CLOCK (what CLAHCK really should be) as a sequence of 5 letters:
: 654 321
:
: C L O C K
:END:

* Grading Overview
  As stated in the syllabus, assignments are weighted at 70% of your final
  grade. These assignments consist of reading the book and working the
  exercises, problems and puzzles (EPPs) therein.

  Each dm1-assignment-##.#.org file will have the structure:

  1. Top-level headings for Exercises, Problems, and Puzzles
  2. Second-level headings for each three-letter acronym.

  There should ideally be about 20 exercises. The file will specify which
  problems are required (a fixed number, usually 10), the rest are optional.
* Grading Breakdown
  For computing the grade for EPPs, there are three raw score components or
  factors:

  1. Ex for Exercises
  2. Pr for Problems
  3. Pu for Puzzles

  These are explained below. The calculation for the \ldquo{}cooked\rdquo score entered into
  the gradebook is:
#+BEGIN_SRC elisp
  (* (+ (* Ex Pr) Pu) 100.0)
#+END_SRC

  Note that all cooked scores are normalized to 100 points possible. You will
  also note that the same score can be achieved through a variety of different
  strategies (see below).
** Exercises
    Each exercise solution is either right or wrong (1 or 0). The Ex factor is
    the number correct divided by the total number, making a number between 0.0
    and 1.0 its value.
** Problems
    All problems are weighted equally on a scale from 1-10. The Pr factor is the
    *average* of these divided by 10, so it also has a value between 0.0 and 1.0
    (but possibly more).
*** Attempt
     0-6: You made an attempt, your score is determined by how far you got.
*** Success
     7: You reached the desired output/answer by proceeding in a
     straightforward, brute-force manner --- not including just searching for
     and finding someone else\rsquo{}s answer.
*** General
     8-9: Your solution is worth more if it works for all input(s) with error
     checking and test cases.
*** Elegant
     10-15: The more elegant, the more points.
** Puzzles
    Each puzzle has four point scales (see below), which are typically presented
    following the problem definition in the ##-ponder-prove.org file. You can
    earn points for each of them *independently*, which means you do not have to
    do them *all* to get *some* points. The average over all puzzles of the sum
    of these four components is the Pu factor.
*** Rephrase
     0.0 - 0.1: a textual description showing you understand the \ldquo{}heart of the
     problem\rdquo.
*** Approach
     0.0 - 0.2: a textual description of how you approached solving the problem.
*** Solution
     0.0 - 0.3: the solution itself. Points are only awarded if it works or the
     correct answer is reached.
*** Proof
     0.0 - 0.3 (or more): a textual description of how we know the solution is
     correct. The more robust the argument, the higher the points.
** Mechanical care
  See the [[file:mechanical-care.org][mechanical-care.org]] file.

  Also, please put your answers for Exercises and Problems in the supplied
  \ldquo{}info\rdquo blocks, e.g.,
#+begin_info
  Your answer goes here.
#+end_info
  removing \ldquo{}Your answer goes here.\rdquo of course.

  Note that there is a different way to format your answers to the Puzzles, by
  using the four supplied subheadings: Rephrase, Approach, Solution and Proof.
* Grading Variations 
  Here are some ways the same overall score can be achieved, for example, 90%:
  1. 100% on exercises, 90% on problems, nothing on puzzles.
  2. 90% on exercises, 100% on problems, nothing on puzzles.
  3. 90% on exercises, 90% on problems, and 9% extra credit on puzzles.
* Grading Code
  The purpose of this code is to help graders in their work, but it can also
  help you! You can insert the same grade-calculation code they will, and play
  \ldquo{}what if\rdquo on a more fine-grained scale.

  How to use this code to enter scores will be demonstrated in class.
#+BEGIN_SRC elisp :results silent
  (require 's)

  (defun weekly-EPPs (index)
    (elt [[[CRC DGZ]
           [CHJ DZB]
           [DOK CJF]]
          [[UCA ODS UGX OGR UWM OPZ UOX OTX UOT UIN OJL
                UCG OQT UTQ UJU OLH UWY OBW USL OYP UBV]
           [OIM* OIO* UIJ OYU UOH OZD* UZM OOY* OKJ* UVH OJM*
                 ULQ* OTD OKQ* UKF OKL UEZ OYW* UEF* OUB UQY*]
           [OQP USV UFZ]]
          [[TDR WDT TEJ WFK TER TGE THP WKM TIW TKG WOV WQW]
           [TBD* WDK* TEH WFC WGP WGW* TFV* WJS WKC WNW
                 TMZ TNL WRD TNQ]
           [TEU TME WRA]]
          [[WRP TOJ WRU TOL TUK WVQ TUQ WVU TVL TXG]
           [WZO TOU WYH* TLI WPI TSD* WTM* TTV WUZ WZM* TUW
                WWD* WWR* TWN* WWS WZG* TKH WUE]
           [MMP]]
          [[MGX ECI ECT MKJ EFE MKL EFS MMC]
           [EBQ MHB MLB EJE* MLU* EKQ MON]
           [EJK EJU MNE]]
          [[QAM REX QCV RFC QCZ RFF QDM RJV QIQ RLH]
           [RGL QEB RGM QFK RHB QGK RVB* QGT QKT RNM QOS ROP* QRQ*]
           [QKA RNC ROX]]
          [[FAB FDZ FJH IWK FOJ VAR VAY FQW VCR FRM]
           [ISM* FBH* ITT FDK* IVO* IWC IXT* FMD IYJ IZL FOY* VAO
                 FQI FQL* VEM FUA VFJ VGU FVH VGX FXI* VIB FYR VIW]
           [FJY FVF]]
          [[GMQ GMY JQA GRZ JYA GXF]
           [XAJ* JPZ XFO]
           [GYI]]
          [[GYN]
           [XGG]
           [None]]
          [[LDA SQI LJP YGT LUM]
           [SUF LNR LDO YCF YZU]
           [None]]
          [[LND]
           [LTI YDQ YTR LGO YIV]
           [None]]
          [[HST HTC KPS KWD KOV AGA KNF]
           [KDB* ABR* HRR KEO HMO HIJ* KLE* HAB HBT*]
           [None]]
          [[HAX HKE KBB HRL KHO HLX HBE]
           [HJS KHQ AGD* HSG* ANA* KSI KSQ KSC*]
           [HTR]]
          [[BAO NCO PDQ NTC PTW NTM PMV NES BRZ]
           [BRE NGP BRQ PIQ PRK NIO* PFA BGT* NGI NLR BSP NBO* PBI]
           [BJO NKY BMI]]
          ] index))

  (defun safe-subseq (seq from to)
    (subseq seq from (min to (length seq))))

  (defun split-list (big-list size)
    (let* ((len (/ (length big-list) (float size)))
           (lo (floor len))
           (hi (ceiling len)))
      (mapcar* 'safe-subseq (make-list hi big-list)
               (number-sequence 0 (* lo size) size)
               (number-sequence size (* hi size) size))))

  (defun remove-if-null (list-possibly-containing-nils)
    (remove-if 'null list-possibly-containing-nils))

  (defun cons-with-zero (some-list)
    (mapcar* 'cons some-list (make-list (length some-list) 0)))

  (defun cons-with-list-of-zeros (some-list)
    (mapcar* 'cons some-list (make-list (length some-list) '(.0 .0 .0 .0))))

  (defun to-string (something)
    (format "%s" something))

  (defun stringify (some-list pad)
    (format (concat (make-string pad ? ) "%s")
            (mapconcat 'to-string some-list " ")))

  (defun is-optional (TLA)
    (= 4 (length (symbol-name TLA))))

  (defun record-symbol-type (symbol type)
    (put symbol :type type)
    symbol)

  (defun record-symbols-types (vector-of-symbols type)
    (mapcar* 'record-symbol-type
             vector-of-symbols (make-list (length vector-of-symbols) type)))

  (defun format-exercises-or-problems (vector-of-symbols type)
    (mapconcat
     'identity
     (mapcar*
      'stringify
      (mapcar 'cons-with-zero
              (mapcar 'remove-if-null
                      (split-list
                       (remove-if 'is-optional
                                  (record-symbols-types vector-of-symbols type))
                       6)))
      (cons 0 (make-list 10 13)))
     "\n"))

  (defun fix-zeros (string-with-zeros)
    (replace-regexp-in-string "0.0" ".0" string-with-zeros))

  (defun format-puzzles (vector-of-symbols)
    (mapconcat
     'identity
     (mapcar
      'fix-zeros
      (mapcar* 'stringify
               (mapcar 'cons-with-list-of-zeros
                       (mapcar 'remove-if-null
                               (split-list
                                (record-symbols-types vector-of-symbols 'Puzzle)
                                3)))
               (cons 0 (make-list 5 13))))
     "\n"))

  (defun format-weekly-EPPs (week-NN)
    (let ((week-NN-EPPs (weekly-EPPs week-NN)))
      (format "EX '(%s)\n        PR '(%s)\n        PU '(%s)"
              (format-exercises-or-problems (elt week-NN-EPPs 0) 'Exercise)
              (format-exercises-or-problems (elt week-NN-EPPs 1) 'Problem)
              (format-puzzles (elt week-NN-EPPs 2)))))

  (defun format-rest-of-score-calculation-code ()
    (concat "
          Ex (/ (apply '+ (mapcar 'cdr EX)) 1.0 (length EX))
          Pr (/ (apply '+ (mapcar 'cdr PR)) 10.0 (length PR))
          Pu (/ (apply '+ (apply 'append (mapcar 'cdr PU))) 1.0 (length PU))
          raw-score (* Ex Pr)"
            ;; extra-credit code
            "
          extra-credit Pu"))

  (defun format-score-calculation-code (index)
    (format "\n#+BEGIN_SRC elisp :results raw\n  (setq %s %s
          score (* (+ raw-score extra-credit) 100.0)
          displayed-score (format \"#+SCORE: %c3.2f\\n\" score))\n%c+END_SRC\n"
            (if (integerp index)
                (format-weekly-EPPs index)
              "not-found t")
            (format-rest-of-score-calculation-code) ?% ?#))

  (defun find-assignment-title-in-buffer ()
    (save-excursion
      (goto-char (point-min))
      (let ((colon (search-forward ":" nil t)))
        (if colon
            (s-trim (buffer-substring-no-properties
                     (+ colon 1)
                     (progn (end-of-line) (point))))
          1234))))

  (defun lookup-assignment-index ()
    (cdr
     (assoc
      (find-assignment-title-in-buffer)
      '(("DM1 Assignment 01.3" . 0)
        ("ABC Sets and Logic" . 1)
        ("DEF Functions I" . 2)
        ("DEF Functions II" . 3)
        ("GHI Relations" . 4)
        ("JKL Counting & Probability" . 5)
        ("MNO Number Theory I" . 6)
        ("PQR Number Theory II" . 7)
        ("PQR Number Theory III" . 8)
        ("STU Trees I" . 9)
        ("STU Trees II" . 10)
        ("VWX Graphs I" . 11)
        ("VWX Graphs II" . 12)
        ("YZ@ Languages and Grammars" . 13)
        (1234)))))

  (defun insert-score-calculation-code ()
    "Insert score calculation code."
    (goto-char (point-min))
    (while (not (looking-at "^$"))
      (forward-line 1))
    (insert (format-score-calculation-code
             (lookup-assignment-index))))

  (defun clear-vars ()
    (mapc 'makunbound '(EX Ex PR Pr Pu raw-score extra-credit score displayed-score)))

  (defun iscc ()
    (interactive)
    (insert-score-calculation-code)
    (clear-vars))

  (defun update-score (epp points)
    (save-excursion
      (goto-char (point-min))
      (when (search-forward (if (listp points) epp (concat epp " \. ")) nil t)
        (cond ((numberp points)
               (delete-char 1)
               (insert (number-to-string points)))
              ((listp points)
               (delete-char 12) ; " .0 .0 .0 .0"
               (insert (apply 'format " .%d .%d .%d .%d" points)))
              (t (error "bad points"))
              ))
      t))

  (defun get-exercise-score (epp-tla)
    (if (y-or-n-p (concat "Give credit for exercise " epp-tla "?")) 1 0))

  (defun get-problem-score (epp-tla)
    (let ((number (read-number (concat "Enter points (1-10) for problem " epp-tla ": "))))
      (min (max number 0) 10)))

  (defun get-puzzle-score (points)
    (let ((object
           (read-from-minibuffer
            (concat "Enter list of points (e.g., (1 2 3 0)) for puzzle " epp-tla ": ")
            nil nil t)))
      (if (and (listp object) (<= (apply '+ object) 10))
          object
        "no good")))

  (defun find-tla-of-epp-at-point ()
    (let* ((where (point))
           (entry-as-string (org-entry-get where "ITEM"))
           (entry-as-symbol (intern entry-as-string)))
      (if (get entry-as-symbol :type)
          entry-as-string ; it is a TLA of an EPP
        (first (org-element-map
                   (org-element-parse-buffer 'headline) 'headline
                 (lambda (x)
                   (when (and (= 2 (org-element-property :level x))
                              (<= (org-element-property :begin x) where)
                              (<= where (org-element-property :end x)))
                     (org-element-property :title x))))))))

  (defun enter-score ()
    (interactive)
    (let (epp-tla epp-tla-symbol-class points)
      (setq epp-tla (find-tla-of-epp-at-point)
            epp-tla-type (get (intern epp-tla) :type)
            points (case epp-tla-type
                     (Exercise (get-exercise-score epp-tla))
                     (Problem  (get-problem-score epp-tla))
                     (Puzzle   (get-puzzle-score epp-tla))
                     (t (error "Unknown or missing TLA type"))))
      (update-score epp-tla points))
    (save-buffer))
#+END_SRC
